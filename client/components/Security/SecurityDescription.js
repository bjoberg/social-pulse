const SecurityDescription = "Because our project is a web application with access to user social media accounts, we must consider many security vulnerabilities during the design and implementation of our app. These concerns will rely on secure implementation of our code as well as the security of services we will be using, such as Heroku and MongoDB. For the required web hosting, we have chosen to use Heroku, which comes with built in security measures. Heroku makes use of Amazonâ€™s data centers to ensure physical security and compliance with current security standards. Heroku itself provides countermeasures to digital attacks, such as DDoS mitigation, spoofing and sniffing protection, and port scanning prohibition. On the database end, we have chosen to use MongoDB to store our user data. MongoDB, much like Heroku, comes with some built in security features. MongoDB provides features such as user authentication and access control to prevent unauthorized users from viewing data, as well as configurable TLS/SSL to encrypt data in transit. To safeguard user passwords in the event that the database is compromised, we will hash user passwords before storing them. For this, we will use common, secure hashing algorithms such as SHA-256 or SHA-3, avoiding the SHA-1 algorithm due to recent revelations about its security. By using MongoDB for our data storage, we also avoid the widely used threat posed by SQL injection attacks but introduce the possibility of NoSQL injections. Luckily, MongoDB comes with a secure BSON query assembly tool as well as security notes in the documentation, which will help us write secure code for our database. We will also include some security functionality of our own in order to ensure user data is protected. The first measure we will take is to include CAPTCHA functionality at login and at account creation which helps to avoid brute force dictionary attacks on user authentication and to avoid spam account creation. Next, we will acquire an SSL certificate in order to establish an encrypted channel between the server and the client to protect user data in transit over insecure networks. Thirdly, we will include the option for the user to set up two factor authentication in order to amplify the security of user verification. Finally, we will use Oauth in order to ensure the user permits Pulse to access and change their social media data and all accesses and changes are secured through the Oauth protocol.";

export { SecurityDescription };